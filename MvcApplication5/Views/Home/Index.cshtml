@{
    ViewBag.Title = "Библиотека";
}

<script>
    



    Ext.onReady(function () {
        //я знаю, что плохо делать глобальную переменную
        //Для проверки, изменился ли текст в филтр-поле
        var filterTextVar = '';

        //Модель для живого поиска
        Ext.define('BookSearch', {
            extend: 'Ext.data.Model',
            idProperty: 'BookId',
            fields: [{
                name: 'BookId',
                type: 'int',
            }, {
                name: 'author',
                type: 'string',
            }, {
                name: 'title',
                type: 'string',
            }, {
                name: 'text',
                type: 'string'
            }]
        });

        //Модель для книги 
        Ext.define('Book', {
            extend: 'Ext.data.Model',
            idProperty: 'BookId',

            fields: [{
                name: 'BookId',
                type: 'int',
            },{
                name: 'author',
                type: 'string',
            },{
                name: 'title',
                type: 'string'
            },{
                name: 'takeDate',
                type: 'string'
            },{
                name: 'user',
                type: 'string'
            }]
        });

        //Данные для комбобокса в фильтре 
        var filterTypeData = [
            ['Author', 'Автор'],
            ['Title', 'Название'],
            ['All', 'Везде']
        ];

        //Хранилище для живого поиска
        bookSearchStore = Ext.create('Ext.data.Store', {
            model: 'BookSearch',
            proxy: {
                type: 'ajax',
                url: 'BooksGrid/BookSearch',
                reader: {
                    type: 'json',
                    root: 'books'
                }
            }
        });

        //Хранилище для грида со всеми книгами
        var bookStore = Ext.create('Ext.data.Store', {
            model: 'Book',
            autoLoad: true,
            pageSize: 10,
            proxy: {
                type: 'ajax',
                url: 'BooksGrid/getBooks',
                reader: {
                    type: 'json',
                    root: 'books'
                }
            }
        });

        //Хранилище для грида с книгами, которые взял пользователь
        var myBookStore = Ext.create('Ext.data.Store', {
            model: 'Book',
            autoLoad: true,
            proxy: {
                type: 'ajax',
                url: 'BooksGrid/GetMyBook',
                reader: {
                    type: 'json',
                    root: 'books'
                }
            }
        });

        //Метод для начала поиска
        function startSearch() {
            var formData = filterForm.getForm().getValues();
                    
            // var filterData = '?' + formData;
            // console.log(formData);
            bookStore.getProxy().extraParams = formData;
            bookStore.load();
                   
        }

        //Функция для взятия книги пользователем
        function takeBookfunc(index) {
          //  console.log(index);
            
            var bookId = bookStore.getAt(index).get('BookId');
            console.log({ index: index, bookid: bookId, bookStore: bookStore });
            Ext.Ajax.request({
                url: "BooksGrid/TakeBook?BookId=" + bookId,
                success: function (response, options) {
                    var objAjax = Ext.decode(response.responseText);
                    if (objAjax.success) {
                        Ext.Msg.alert("Вы взяли книгу");
                        bookStore.load();
                        myBookStore.load();
                    }
                    else
                        Ext.Msg.alert(objAjax.errorText);
                },
                failure: function (response, options) {
                    Ext.Msg.alert('Ошибка: ' + response.statusText);
                }
            })
        };

        //Метод для обновления текста в тултипе описания книги
        function updateTipBodyFunc(tip) {
            var bookid = booksView.getRecord(tip.triggerElement).get('BookId');
            var author = booksView.getRecord(tip.triggerElement).get('author');
            var title = booksView.getRecord(tip.triggerElement).get('title');
            //var restip = "<img style='width:100px; height:75px;' src=\"BooksGrid/getImageByID?BookId=" + bookid + "\" />";
            //var restip = '<div style="display: inline-block;"><div style="display: inline-block; width: 50%; overflow: hidden"><img style="width:100px; height:75px;" src="BooksGrid/getImageByID?BookId=' + bookid + '"/></div>' +
            //'<div style="float: right; width:50%;overflow:inherit"><span>' + author + '</span><br>' +
            //'<span>' + title + '</span></div></div>';
            var restip = '<img style="width:100px; height:75px;float:left" src="BooksGrid/getImageByID?BookId=' + bookid + '"/>' +
                '<span>' + author + '</span><br><br>' +
                '<span>' + title + '</span>';
            tip.update(restip);
        }

        //Метод для возврата книги пользователем в библиотеку
        function returnBookFunc(index) {
            var bookId = myBookStore.getAt(index).get('BookId');
            Ext.Ajax.request({
                url: "BooksGrid/ReturnBook?BookId=" + bookId,
                success: function (response, options) {
                    var objAjax = Ext.decode(response.responseText);
                    if (objAjax.success) {
                        Ext.Msg.alert("Вы вернули книгу");
                        bookStore.load();
                        myBookStore.load();
                    }
                    else
                        Ext.Msg.alert(objAjax.errorText);
                },
                failure: function (response, options) {
                    Ext.Msg.alert('Ошибка: ' + response.statusText);
                }
            })
        }

        //Хранилище для списка должников
        var debtorsStor = Ext.create('Ext.data.Store', {
            model: 'Book',
            autoLoad: true,
            groupField: 'user',
            proxy: {
                type: 'ajax',
                url: 'BooksGrid/getDebtorsBooks',
                reader: {
                    type: 'json',
                    root: 'books'
                }
            }
        });

        //Создания окна со списком должников
        function debtors() {
            //console.log('start');
            debtorsStor.load();
            var win = Ext.create('Ext.window.Window', {
                title: 'Должники',
                modal: true,
                height: 250,
                width: 550,
                layout: 'fit',
                items: [{
                    xtype: 'gridpanel',
                    store: debtorsStor,
                    //height: 250,
                    
                   // width: 550,
                    features: [
                        Ext.create('Ext.grid.feature.Grouping', {
                            groupHeaderTpl: '{name} ({rows.length})'
                        })],
                    columns: [{
                        xtype: 'rownumberer'
                    }, {
                        dataIndex: 'BookId',
                        hidden: true
                    }, {
                        header: "Название",
                        xtype: 'templatecolumn',
                        flex: 1,
                        dataIndex: 'author',
                        tpl: '<b>{author}.</b> {title}'
                    }, {
                        header: 'Дата возврата (+10д)',
                        dataIndex: 'takeDate'
                        //,renderer: function(v) {
                        //    if 
                        //    return '<span style="color:red">{v}</span>';
                    }, {
                        header: 'Обложка',
                        dataIndex: 'BookId',
                        renderer: function (v) {
                            return "<img style='width:80px; height:60px;' src=\"BooksGrid/getImageByID?BookId=" + v + "\" />";
                        }
                    }]
                }]
            });
            win.show();
            console.log('fin');
        }

        //Создания окна для добавления новой книги
        function addNewBook() {
            var win = Ext.create('Ext.window.Window', {
                title: 'Добавление книги',
                modal: true,
                items: [{
                    xtype: 'form',
                    items: [{
                        xtype: 'filefield',
                        name: 'uploadImage',
                        fieldLabel: 'файл изображения',
                        msgTarget: 'side',
                        allowBlank: false,
                        buttonText: '...'
                    }, {
                        xtype: 'textfield',
                        fieldLabel: 'Автор',
                        name: 'Author',
                    }, {
                        xtype: 'textfield',
                        fieldLabel: 'Название',
                        name: 'Title',
                    }],
                    buttons: [{
                        text: 'добавить книгу',
                        handler: function () {
                            var form = this.up('form').getForm();
                            if (form.isValid()) {
                                form.submit({
                                    url: 'BooksGrid/addBook',
                                    waitMsg: 'Загрузка...',
                                    success: function (fp, o) {
                                        Ext.Msg.alert('Книга добавлена');
                                        win.close();
                                        bookStore.load();
                                    }
                                })
                            }
                        }
                    }]
                }]
            });

            win.show();
        }

        //Форма фильтрации
        var filterForm = Ext.create('Ext.form.Panel', {
            title: 'поиск',
            height: 150,
            layout: 'hbox',
            items: [{
                xtype: 'combobox',
                fieldLabel: 'Поиск по',
                name: 'filterField',
                flex: 1,
                labelAlign: 'top',
                emptyText: 'Везде',
                id: 'comboFilterField',
                //autoSelect: true,
                store: new Ext.data.SimpleStore({
                    id: 0,
                    fields:[
                        'enText',
                        'ruText',
                    ],
                    data: filterTypeData
                }),
                valueField: 'enText',
                displayField: 'ruText',
                queryMode: 'local'
            }, {
                xtype: 'combobox',
                fieldLabel: 'Частичный текст',
                name: 'filterText',
                id: 'filterText',
                flex: 1,
                labelAlign: 'top',
                enableKeyEvents: true,
                emptyText: 'Введите текст..',
                store: bookSearchStore,
                displayField: 'text',
                valueField: 'text',
                hideTrigger: true,
                selectOnFocus: true,
                mode: 'remote',
                editable: true,
                listConfig: {
                    autoShow: true,
                    getInnerTpl: function(){
                        return 'автор: {author} <br> Название: {title} <hr>'
                    }
                },
                listeners: {
                    
                    keyup: function (comboBox, ev) {
                        //console.log(comboBox.getValue());
                        if (ev.getKey() == ev.ENTER) {
                            
                            if (filterTextVar == comboBox.getValue()) {
                                //Ext.getCmp('searchButton').fireEvent('click');
                                startSearch();
                                return;
                            }
                        };
                        if (filterTextVar == comboBox.getValue())
                            return;
                        filterTextVar = comboBox.getValue();
                        bookSearchStore.getProxy().extraParams = {
                            //Тут, наверное, лучше вытащить из формы поле
                            'filterField': Ext.getCmp('comboFilterField').getValue(),
                            'text': comboBox.getValue()
                        };
                        bookSearchStore.load();
                        comboBox.expand();
                    }
                }
            }, {
                xtype: 'checkbox',
                boxLabel: 'Только в наличии',
                name: 'onlyInStock',
                id: 'onlyInStochChb',
                checked: false,
                listeners: {
                    change: function (comboBox, ev) {
                            startSearch();
                    }
                }
            }],
            buttons: [{
                text: 'поиск',
                id: 'searchButton',
                handler: startSearch
            }, {
                text: 'сброс',
                handler: function () {
                    bookStore.getProxy().extraParams = {
                        "filterField": null,
                        "filterText": null,
                        "onlyInStock": null
                    };
                    filterForm.getForm().reset();

                    bookStore.load();
                }

            }]
        });

       // console.log(Ext.getCmp('filterText'));
            //Ext.getCmp('onlyInStochChb').onchange = function() {
            //    console.log( checkbox.checked )};
        //метод для входа пользователя
        function logInMethod() {
            loginForm.getForm().submit({
                url: 'Account/Login',
                success: function (form, action) {
                    Ext.MessageBox.alert('Авторизация пройдена', action.result.message)
                    Ext.getCmp('textFieldUserName').setReadOnly(true);
                    Ext.getCmp('textFieldPassword').setReadOnly(true);;
                    Ext.getCmp('buttonLogin').hide();
                    Ext.getCmp('buttonRegister').hide();
                    Ext.getCmp('buttonLogOut').show();
                    bookStore.load();
                    myBookStore.load();
                            
                },
                failure: function (form, action) {
                    Ext.MessageBox.alert('Авторизация не пройдена', action.result.message)
                }
            });
                        
        }

        //Форма авторизации
        var loginForm = Ext.create('Ext.form.Panel', {
            //header: false,
            title: 'Я',
            //bodyPadding: 5,

            titleAlign: 'center',
            height: 150,
            defaults: {
                anchor: '80%'
            },

            items: [{
                xtype: 'textfield',
                fieldLabel: 'Логин',
                name: 'UserName',
                id: 'textFieldUserName',
                // labelAlign: 'top',
                flex: 1
            }, {
                xtype: 'textfield',
                fieldLabel: 'Пароль',
                name: 'Password',
                inputType: 'password',
                id: 'textFieldPassword',
                // labelAlign: 'top',
                flex: 1,
                enableKeyEvents: true,
                listeners: {
                    keyup: function (textfield, ev) {
                        console.log('enter');
                        if (ev.getKey() == ev.ENTER) {
                            logInMethod();
                            return;
                        };
                    }
                    
                }
            }],
            buttons: [{
                text: 'Войти',
                id: 'buttonLogin',
                handler: logInMethod
            }, {
                text: 'Зарегистрироваться',
                id: 'buttonRegister',
                handler: function () {
                    loginForm.getForm().submit({
                        url: 'Account/Register',
                        success: function (form, action) {
                            Ext.MessageBox.alert('Регистрация прошла успешно', 'Ok')
                            Ext.getCmp('textFieldUserName').setReadOnly(true);
                            Ext.getCmp('textFieldPassword').setReadOnly(true);
                            Ext.getCmp('buttonLogin').hide();
                            Ext.getCmp('buttonRegister').hide();
                            Ext.getCmp('buttonLogOut').show();
                            myBookStore.load();
                        },
                        failure: function (form, action) {
                            Ext.MessageBox.alert('Ошибка регистрации', 'Nope')
                        }
                    });
                }
            }, {
                text: 'Выйти',
                id: 'buttonLogOut',
                hidden: true,
                handler: function () {
                    Ext.Ajax.request({
                        url: 'Account/LogOff',
                        success: function (form, action) {
                            Ext.getCmp('textFieldUserName').setReadOnly(false);
                            Ext.getCmp('textFieldPassword').setReadOnly(false);
                            Ext.getCmp('buttonLogin').show();
                            Ext.getCmp('buttonRegister').show();
                            Ext.getCmp('buttonLogOut').hide();
                            myBookStore.load();
                        }
                    })
                }
            }]
        });

        //Проверка, вдруг пользователь авторизован
        Ext.Ajax.request({
            url: 'Account/IsAuth',
            success: function (response, options) {
                var objAjax = Ext.decode(response.responseText);
                //console.log(objAjax);
                if (objAjax.success) {
                    Ext.getCmp('textFieldUserName').setValue(objAjax.UserName);
                    Ext.getCmp('textFieldUserName').setReadOnly(true);
                    Ext.getCmp('textFieldPassword').setReadOnly(true);
                    Ext.getCmp('buttonLogin').hide();
                    Ext.getCmp('buttonRegister').hide();
                    Ext.getCmp('buttonLogOut').show();
                    myBookStore.load();
                }
            }
        });

        //Список всех книг
        var booksGrid = Ext.create('Ext.grid.Panel', {
            title: 'Книги',
            store: bookStore,
            flex: 1,
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragGroup: 'userBookPanel',
                    dropGroup: 'booksGrid'
                },
                listeners: {
                    beforedrop: function (node, data, overModel, dropPosition, dropHandlers) {
                        returnBookFunc(data.records[0].index);
                        dropHandlers.cancelDrop();
                    }
                }
            },
            dockedItems: [{
                xtype: 'toolbar',
                dock: 'top',
                items: [{
                    xtype: 'button',
                    text: 'Добавить книгу',
                    handler: addNewBook
                }, {
                    xtype: 'button',
                    text: 'Должники',
                    handler: debtors
                }]
            }, {
                xtype: 'pagingtoolbar',
                store: bookStore,
                dock: 'bottom',
                displayInfo: true,
                beforePageText: 'Страница',
                afterPageText: 'из {0}',
                displayMsg: 'Книги {0} - {1} из {2}'
            }],
            
            columns: [{
                xtype: 'rownumberer'
            }, {
                dataIndex: 'BookId',
                hidden: true
            },{
                header: 'Автор',
                dataIndex: 'author'
            }, {
                header: 'Название',
                dataIndex: 'title',
                flex: 1
            }, {
                header: 'Дата взятия',
                dataIndex: 'takeDate'
            },
            {
                header: 'Обложка',
                dataIndex: 'BookId',
                renderer: function (v) {
                    return "<img style='width:80px; height:60px;' src=\"BooksGrid/getImageByID?BookId=" + v + "\" />";
                        
                }
            },{
                xtype: 'actioncolumn',
                align: 'center',
                header: 'Взять книгу',
                items: [{
                    icon: '/Image/TakeBook.jpg',
                    tooltip: 'Взять книгу',
                    
                    handler: function (grid, rowIndex, colIndex) {
                        takeBookfunc(rowIndex);
                    }
                }]

            }, {
                xtype: 'actioncolumn',
                align: 'center',
                header: 'Удалить книгу',
                items: [{
                    icon: '/Image/delete.png',
                    tooltip: 'Удалить книгу',
                    handler: function (grid, rowIndex, colIndex) {
                        var bookId = bookStore.getAt(rowIndex).get('BookId');
                        Ext.Ajax.request({
                            url: "BooksGrid/DeleteBook?BookId=" + bookId,
                            success: function (response, options) {
                                var objAjax = Ext.decode(response.responseText);
                                if (objAjax.success) {
                                    Ext.Msg.alert("Книга удалена");
                                    bookStore.load();

                                }
                                else {
                                    Ext.Msg.alert(objAjax.errorText);
                                    bookStore.load();
                                }
                            },
                            failure: function (response, options) {
                                Ext.Msg.alert('Ошибка: ' + response.statusText);
                            }
                        })
                    }
                }]

            }]
        });

        //Панель с книгами, которые взял пользователь
        var userBookPanel = Ext.create('Ext.grid.Panel', {
            title: 'Мои книги',
            store: myBookStore,
            flex:1,
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragGroup: 'booksGrid',
                    dropGroup: 'userBookPanel',
                },
                listeners: {
                    beforedrop: function (node, data, overModel, dropPosition, dropHandlers) {
                        takeBookfunc(data.records[0].index);
                        dropHandlers.cancelDrop();
                    }
                }
            },

            columns: [{
                xtype: 'rownumberer'
            }, {
                dataIndex: 'BookId',
                hidden: true
            }, {
                header: "Название",
                xtype: 'templatecolumn',
                flex: 1,
                dataIndex: 'author',
                tpl:'<b>{author}.</b> {title}'
            }, {
                header: 'Дата возврата (+10д)',
                dataIndex: 'takeDate'
                //,renderer: function(v) {
                //    if 
                //    return '<span style="color:red">{v}</span>';
            }, {
                header: 'Обложка',
                dataIndex: 'BookId',
                renderer: function (v) {
                    return "<img style='width:80px; height:60px;' src=\"BooksGrid/getImageByID?BookId=" + v + "\" />";
                }
            }, {
                xtype: 'actioncolumn',
                align: 'center',
                header: 'Вернуть книгу',
                items: [{
                    icon: '/image/ReturnBook.jpg',
                    tooltip: 'Вернуть книгу',
                    handler: function (grid, rowIndex, colIndex) {
                        returnBookFunc(rowIndex);
                    }
                }]

            }]
        });

        //Общее окно
        var viewport = Ext.create('Ext.container.Viewport', {
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            renderTo: Ext.getBody(),
            border: false,
            header: false,
            defoults: {
                titleAlign: 'center'
            },
            
            
            items: [{
                xtype: 'panel',
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: false,
                header: false,
                
                flex: 2,
                items: [filterForm, booksGrid]
            }, {
                xtype: 'panel',
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: false,
                header: false,
                
                flex: 1,
                items: [loginForm, userBookPanel]
            }]
        });

        //Всплывающие подсказки 
        var booksView = booksGrid.getView();
        var userBooksView = userBookPanel.getView();
        var booksTips = Ext.create('Ext.tip.ToolTip', {
            target: booksView.el,
            delegate: booksView.itemSelector,
            trackingMouse: true,
            renderTo: Ext.getBody(),
            listeners: {
                beforeshow: function updateTipBody(tip) {
                    updateTipBodyFunc(tip);
                }
            }
        });
        var userbooksTips = Ext.create('Ext.tip.ToolTip', {
            target: userBooksView.el,
            delegate: userBooksView.itemSelector,
            trackingMouse: true,
            renderTo: Ext.getBody(),
            listeners: {
                beforeshow: function updateTipBody(tip) {
                    updateTipBodyFunc(tip);
                }
            }
        });
    });

    //Попытка настроить отправку данных по интер. Не работает
    //var filterKeyMap = new Ext.util.KeyMap({
    //    target: Ext.getCmp('textFieldPassword'),
    //    key: 13,
    //    //eventName: 'keydown',
    //    fn: function () {
    //        console.log(Ext.getCmp('textFieldPassword'));
    //    }
    //    //,scope: Ext.getCmp('filterText')
    //});
 
</script>

